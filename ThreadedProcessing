int currentRectangle = 0;
int numRectangles = 50;
int ticSpeed = 60;
int[] rectangleLengths = new int[numRectangles];
boolean recenterNotSkinny = (numRectangles <= 28);
int index = 0;
boolean paused = false;

Thread t = new Thread() {
    public void run() {
       bubbleSort(rectangleLengths); 
    }
};

void setup() {
  size(1600, 900);
  frameRate(ticSpeed);
  generateRectangleLengths();
  t.start();
}

void draw() {
  drawRectangles();
  paused = false;
}
 // Implements the Algorithm for Bubble Sort
  void bubbleSort(int inputArray[]) {
    int numElements = inputArray.length;
    for (int firstPosition = 0; firstPosition < numElements - 1; firstPosition++) {
      for (int secondPosition = 0; secondPosition < numElements - firstPosition - 1; secondPosition++) {
        if (inputArray[secondPosition] > inputArray[secondPosition + 1]) {
            swapArrayElements(secondPosition, secondPosition + 1);
        }
      }
    }
  }

boolean isSorted() {
  for (int index = 0; index < numRectangles - 1; index++) {
    if (rectangleLengths[index] > rectangleLengths[index + 1]) {
      return false;
    }
  }
  return true;
}

void swapArrayElements(int firstPos, int secondPos) {
  int tempElement = rectangleLengths[secondPos];
  rectangleLengths[secondPos] = rectangleLengths[firstPos];
  rectangleLengths[firstPos] = tempElement;
  redraw();  
  paused = true;
  while (paused) {
       try {
         Thread.sleep(1);
       } catch (Exception e) {
       }; 
   }
}

void generateRectangleLengths() {
  int currentPos = 0;
  for (int index = 0; index < numRectangles; index++) {
    int heightModifier = (int) random(1, 50);
    rectangleLengths[currentPos] = heightModifier * 10;
    currentPos++;
  }
}

void drawRectangles() {
  int yCoordinate = 700;
  if (recenterNotSkinny) {
    drawRecenteredRectangles(yCoordinate);
  } else {
    drawSkinnyRectangles(yCoordinate);
  }
}

private void drawRecenteredRectangles(int yCoord) {
  background(200, 200, 200);
  int currentPos = 0;
  int rectWidth = 50;
  int startingX = 750 - (25 * (numRectangles - 1));
  for (int index = 0; index < numRectangles; index++) {
    //fill(255, 255, 255);
    //if (index == currentRectangle) {
    //  fill(0, 255, 0);
    //}
    rect(startingX, yCoord, rectWidth, -rectangleLengths[currentPos]);
    currentPos++;
    startingX += 50;
  }
}

private void drawSkinnyRectangles(int yCoord) {
  background(200, 200, 200);
  int currentPos = 0;
  int rectWidth = 1400 / numRectangles;
  for (int index = 0; index < numRectangles; index++) {
    //fill(255, 255, 255);
    //if (index == currentRectangle) {
    //  fill(0, 255, 0);
    //}
    rect(100 + rectWidth * index, yCoord, rectWidth, -rectangleLengths[currentPos]);
    currentPos++;
  }
}
