/* @Authors: Adrian Moore, Ellie Laton, Federico Fernandez
 ** Class: CSC 345-Spring 2023
 ** Description: This program will act as a visualization for a variety of sorting methods.
 ** It will also compare the runtime efficiencies of hybrid sorting methods against regular ones.
 */

// Global Variable Declaration and Initialization
int numRectangles = 50;
int[] rectangleLengths = new int[numRectangles];

// Sets Up the Startup Window
void setup() {
  size(1600, 900);
  background(200, 200, 200);
  drawRectangles(numRectangles);
  //frameRate();
}

// Draws the Randomized Rectangles According to Input Number of Rectangles
void drawRectangles(int numRects) {

  // Local Variable Declaration and Initialization
  int yCoordinate = 700;
  int currentPosition = 0;

  // Adds Up to 28 Rectangles and Recenters Them Accordingly
  if (numRects <= 28) {
    int rectWidth = 50;
    int startingX = 750 - (25 * (numRects - 1));
    for (int i = numRects; i > 0; i--) {

      // Randomizes the Rectangle Lengths
      int heightModifier = (int) random(2, numRects);

      // Prevents Rectangles of Lengths 0
      if (heightModifier == 0) {
        heightModifier = 1;
      }
      rect(startingX, yCoordinate, rectWidth, -heightModifier * 10);
      rectangleLengths[currentPosition] = heightModifier * 10;
      currentPosition++;
      startingX += 50;
    }
  }

  // Adds More than 28 Rectangles by Making Them Skinnier
  else {
    int rectWidth = 1400 / numRects;
    for (int i = 0; i < numRects; i++) {

      // Randomizes the Rectangle Lengths
      int heightModifier = (int) random(numRects);

      // Prevents Rectangles of Length 0
      if (heightModifier == 0) {
        heightModifier = 1;
      }
      rect(100 + rectWidth * i, yCoordinate, rectWidth, -heightModifier * 10);
      rectangleLengths[currentPosition] = heightModifier * 10;
      currentPosition++;
    }
  }
}

// Updates the Window Based on Changes to the Array
void draw() {
}
